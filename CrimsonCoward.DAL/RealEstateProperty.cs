//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CrimsonCoward.DAL
{
    using System;
    using System.Collections.Generic;
    
    
    public partial class RealEstateProperty
    {
        //public CrimsonCowardEntities db = new CrimsonCowardEntities();
        public string PRL { get; set; }
        public string Qadaa { get; set; }
        public string District { get; set; }
        public string PropertyFor { get; set; }
        public string PropertyType { get; set; }
        public string Neighborhood { get; set; }
        public string Quality { get; set; }
        public Nullable<int> Size { get; set; }
        public Nullable<int> Floor { get; set; }
        public Nullable<int> Receptions { get; set; }
        public Nullable<int> TotalBedrooms { get; set; }
        public Nullable<int> Bathrooms { get; set; }
        public Nullable<int> Age { get; set; }
        public Nullable<bool> Exclusive { get; set; }
        public Nullable<System.DateTime> StartDate { get; set; }
        public Nullable<System.DateTime> EndDate { get; set; }
        public Nullable<int> TotalFloor { get; set; }
        public Nullable<int> FamilyRoom { get; set; }
        public Nullable<int> MasterBedRooms { get; set; }
        public Nullable<int> Parkings { get; set; }
        public Nullable<int> RentPrice { get; set; }
        public Nullable<int> SalePrice { get; set; }
        public Nullable<int> BldChargesPerMonth { get; set; }
        public string AdditionalInformation { get; set; }
        public string Web_GuideDescription { get; set; }
        public Nullable<bool> Active { get; set; }
        public Nullable<bool> Pending { get; set; }
        public Nullable<bool> Closed { get; set; }
        public string Zone { get; set; }
        public string ZoneNbr { get; set; }
        public string ZoningDescription { get; set; }
        public Nullable<int> DriverRoom { get; set; }
        public Nullable<int> MaidRoom { get; set; }
        public Nullable<int> DiningRoom { get; set; }
        public Nullable<int> Kitchen { get; set; }
        public Nullable<int> MaidBathRoom { get; set; }
        public Nullable<bool> ShowOnFirstPage { get; set; }
        public Nullable<bool> Generator { get; set; }
        public Nullable<bool> Furnished { get; set; }
        public string AgentName { get; set; }
        public string Department { get; set; }
        public string Country { get; set; }
        public string Features { get; set; }
        public string MapLong { get; set; }
        public string MapLat { get; set; }

        #region Calculated

        public List<PropertyFeature> PropertyFeatures
        {
            get
            {
                List<PropertyFeature> lst = new List<PropertyFeature>();
                //if (Receptions > 0)
                //    lst.Add(new PropertyFeature() { Name = "Reception Room", Quantity = Receptions });
                //if (TotalBedrooms > 0)
                //    lst.Add(new PropertyFeature() { Name = "Bedroom", Quantity = TotalBedrooms });
                //if (Bathrooms > 0)
                //    lst.Add(new PropertyFeature() { Name = "Bathroom", Quantity = Bathrooms });
                //if (FamilyRoom > 0)
                //    lst.Add(new PropertyFeature() { Name = "Family Room", Quantity = FamilyRoom });
                //if (MasterBedRooms > 0)
                //    lst.Add(new PropertyFeature() { Name = "Master Bedroom", Quantity = MasterBedRooms });
                //if (Parkings > 0)
                //    lst.Add(new PropertyFeature() { Name = "Parking", Quantity = Parkings });
                if (DriverRoom > 0)
                    lst.Add(new PropertyFeature() { Name = "Driver Room", Quantity = 0 });
                if (MaidRoom > 0)
                    lst.Add(new PropertyFeature() { Name = "Maid Room", Quantity = 0 });
                if (MaidBathRoom > 0)
                    lst.Add(new PropertyFeature() { Name = "Maid Bathroom", Quantity = 0 });
                //if (DiningRoom > 0)
                //    lst.Add(new PropertyFeature() { Name = "Dining Room", Quantity = DiningRoom });
                //if (Kitchen > 0)
                //    lst.Add(new PropertyFeature() { Name = "Kitchen", Quantity = Kitchen });

                if (Features != null)
                {
                    foreach (string item in Features.Split(','))
                    {
                        if (!string.IsNullOrEmpty(item.Trim()))
                            lst.Add(new PropertyFeature() { Name = item, Quantity = 0 });
                    }

                    if (Features.ToLower().Contains("sea"))
                        lst.Add(new PropertyFeature() { Name = "Sea View", Quantity = 0 });
                }

                return lst;
            }
        }
        public List<PropertyRoom> PropertyRooms
        {
            get
            {
                List<PropertyRoom> lst = new List<PropertyRoom>();
                if (Receptions > 0)
                    lst.Add(new PropertyRoom() { Name = "Reception Room", Quantity = Receptions.Value });
                if (TotalBedrooms > 0)
                    lst.Add(new PropertyRoom() { Name = "Bedroom", Quantity = TotalBedrooms.Value });
                if (Bathrooms > 0)
                    lst.Add(new PropertyRoom() { Name = "Bathroom", Quantity = Bathrooms.Value });
                if (FamilyRoom > 0)
                    lst.Add(new PropertyRoom() { Name = "Family Room", Quantity = FamilyRoom.Value });
                if (MasterBedRooms > 0)
                    lst.Add(new PropertyRoom() { Name = "Master Bedroom", Quantity = MasterBedRooms.Value });
                if (Parkings > 0)
                    lst.Add(new PropertyRoom() { Name = "Parking", Quantity = Parkings.Value });
                if (DiningRoom > 0)
                    lst.Add(new PropertyRoom() { Name = "Dining Room", Quantity = DiningRoom.Value });
                if (Kitchen > 0)
                    lst.Add(new PropertyRoom() { Name = "Kitchen", Quantity = Kitchen.Value });

                return lst;
            }
        }


        public PropertyTypes PropertyTypeFor
        {
            get
            {
                if (PropertyFor != null && PropertyFor.ToLower().Contains("rent"))
                    return PropertyTypes.Rent;
                else
                    return PropertyTypes.Sale;
            }
        }

        public int Price
        {
            get
            {
                switch (PropertyTypeFor)
                {
                    case PropertyTypes.Rent:
                        return RentPrice.Value;
                    case PropertyTypes.Sale:
                        return SalePrice.Value;
                    default:
                        return SalePrice.Value; ;
                }
            }
        }

        List<PropertyImage> __images = null;
        //public List<PropertyImage> Images
        //{
        //    get
        //    {
        //        if (__images == null)
        //                __images = db.PropertyImages
        //        if (__images == null)
        //            __images = new List<PropertyImage>();
        //        return __images;
        //    }
        //}

        //public byte[] Thumbnail
        //{
        //    get
        //    {
        //        if (Images != null && Images.Count > 0)
        //            return Images[0].Image;
        //        else
        //            return new byte[0];
        //    }
        //}

        #endregion

    }
    public class PropertyRoom
    {
        public string Name { get; set; }
        public int Quantity { get; set; }
    }
    public class PropertyFeature
    {
        public string Name { get; set; }
        public int Quantity { get; set; }
    }
    public enum PropertyTypes
    {
        Sale,
        Rent,
    }
}
